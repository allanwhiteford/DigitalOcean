.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DigitalOcean 3"
.TH DigitalOcean 3 "2014-01-26" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DigitalOcean \- An OO interface to the Digital Ocean API.
.SH "VERSION"
.IX Header "VERSION"
Version 0.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module is an object oriented interface into the Digital Ocean \s-1API\s0.
.PP
.Vb 1
\&    use DigitalOcean;
\&
\&    #for more efficient use, remove "wait_on_events => 1". See WAITING ON EVENTS section for more info
\&    my $do = DigitalOcean\->new(client_id=> $client_id, api_key => $api_key, wait_on_events => 1);
\&
\&    for my $droplet (@{$do\->droplets}) { 
\&        print "Droplet " . $droplet\->name . " has id " . $droplet\->id . "\en";
\&    }
\&
\&    my $droplet = $do\->droplet($droplet_id);
\&    $droplet\->reboot;
\&    $droplet\->power_off;
\&    $droplet\->power_on;
\&    $droplet\->destroy;
\&
\&    my $new_droplet = $do\->create_droplet(
\&        name => \*(Aqnew_droplet\*(Aq,
\&        size_id => $size_id,
\&        image_id => $image_id,
\&        region_id => $region_id,
\&    );
\&
\&    $new_droplet\->enable_backups;
.Ve
.SH "HOW THIS MODULE IS WRITTEN"
.IX Header "HOW THIS MODULE IS WRITTEN"
This module is written to be flexible, so that if changes are made to the Digital Ocean \s-1API\s0,
then I don't have to update this module every time they make changes so that this module will
still work. What I mean by this is that if Digital Ocean adds new parameters that need to be
passed into their calls, these parameters can be passed into the current calls even if I don't
specify them as options and it should still work. For example, say that for the create_droplet
call Digital Ocean adds a new required parameter \*(L"timestamp\*(R". All you would have to do is pass in timestamp:
.PP
.Vb 7
\&    $do\->create_droplet(
\&        name => \*(Aqnew_droplet\*(Aq,
\&        size_id => $size_id,
\&        image_id => $image_id,
\&        region_id => $region_id,
\&        timestamp => $timestamp,
\&    );
.Ve
.PP
And timestamp will be added to the request call with the other parameters. However, if Digital Ocean adds
any new attributes to an object, such as droplet_type for DigitalOcean::Droplet, this I will have
to add to the DigitalOcean::Droplet in order for the DigitalOcean::Droplet objects to respect
this new attribute. If you see that Digital Ocean has added a new attribute that I do not have in one
of my objects, please let me know in bugs <http://rt.cpan.org/NoAuth/Bugs.html?Dist=DigitalOcean>.
.SH "WAITING ON EVENTS"
.IX Header "WAITING ON EVENTS"
.SS "wait_on_events"
.IX Subsection "wait_on_events"
For some calls in Digital Ocean's \s-1API\s0, you need to wait for one call to finish before you can
submit another request that depends on the first call. For instance, if you resize a droplet
and then want to take a snapshot of the droplet, you must wait until the action of resizing
the droplet is complete before you can take the snapshot of this droplet. If you set wait_on_events
to 1, then DigitalOcean will wait on every event until it is complete, so this way you do not have to worry 
about the synchronization of events or if you need to wait between two events. However,
turning wait_on_events on for every event can also cause your script to run much slower if you do not need
to be waiting on every event.
.PP
You may wait on all events by passing in wait_on_events when you create the DigitalOcean object:
.PP
.Vb 1
\&    my $do = DigitalOcean\->new(client_id=> $client_id, api_key => $api_key, wait_on_events => 1);
.Ve
.PP
Or you can toggle it after you have created the DigitalOcean object:
.PP
.Vb 2
\&    $do\->wait_on_events(1);
\&    $do\->wait_on_events(undef);
.Ve
.PP
The default for wait_on_events is that it is set to undef and does not wait on events.
.SS "wait_on_event"
.IX Subsection "wait_on_event"
A more efficient solution is to only wait on indiviudal events that you have to wait on. You can pass in the
wait_on_event flag to any subroutine (this includes subroutines in DigitalOcean's sub modules, such as
DigitalOcean::Droplet) and DigitalOcean will wait until that call is complete before returning.
.PP
.Vb 7
\&    my $droplet = $do\->create_droplet(
\&        name => \*(Aqnew_droplet\*(Aq,
\&        size_id => $size_id,
\&        image_id => $image_id,
\&        region_id => $region_id,
\&        wait_on_event => 1,
\&    );
\&
\&    $droplet\->reboot(wait_on_event => 1);
\&    $droplet\->snapshot(wait_on_event => 1);
\&
\&    my $domain = $do\->domain(56789);
\&    my $record = $domain\->record(98765);
\&
\&    $record\->edit(
\&        record_type => \*(AqA\*(Aq,
\&        data => \*(Aq196.87.89.45\*(Aq,
\&        wait_on_event => 1,
\&    );
\&
\&    etc.
.Ve
.PP
DigitalOcean uses DigitalOcean::Event's wait subroutine to wait on events.
.SS "time_between_requests"
.IX Subsection "time_between_requests"
DigitalOcean uses DigitalOcean::Event's wait subroutine to wait on events. It does
this by making requests to Digital Ocean until the event is complete. You can use time_between_requests
to determine how long DigitalOcean waits between requests before making another request to Digital Ocean to see if an event is
done. You can use it like so:
.PP
.Vb 1
\&    $do\->time_between_requests(1);
.Ve
.PP
or
.PP
.Vb 1
\&    my $do = DigitalOcean\->new(client_id=> $client_id, api_key => $api_key, time_between_requests => 1);
.Ve
.PP
An integer value must be passed in. The default is 2.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "droplets"
.IX Subsection "droplets"
This will return an array reference of DigitalOcean::Droplet objects.
.PP
.Vb 1
\&    my $droplets = $do\->droplets;
\&    
\&    for my $droplet (@{$droplets}) { 
\&        print $droplet\->name . "\en";
\&    }
.Ve
.SS "create_droplet"
.IX Subsection "create_droplet"
This will create a new droplet and return a DigitalOcean::Droplet object. The parameters are:
.IP "\(bu" 4
\&\fBname\fR Required, String, this is the name of the droplet \- must be formatted by hostname rules
.IP "\(bu" 4
\&\fBsize_id\fR Required, Numeric, this is the id of the size you would like the droplet created at
.IP "\(bu" 4
\&\fBimage_id\fR Required, Numeric, this is the id of the image you would like the droplet created with
.IP "\(bu" 4
\&\fBregion_id\fR Required, Numeric, this is the id of the region you would like your server in
.IP "\(bu" 4
\&\fBssh_key_ids\fR Optional, Numeric \s-1CSV\s0, comma separated list of ssh_key_ids that you would like to be added to the server
.IP "\(bu" 4
\&\fBprivate_networking\fR Optional, Boolean, enables a private network interface if the region supports private networking
.PP
.Vb 6
\&    my $new_droplet = $do\->create_droplet(
\&        name => \*(Aqnew_droplet\*(Aq,
\&        size_id => $size_id,
\&        image_id => $image_id,
\&        region_id => $region_id,
\&    );
.Ve
.SS "droplet"
.IX Subsection "droplet"
This will retrieve a droplet by id and return a DigitalOcean::Droplet object.
.PP
.Vb 1
\&    my $droplet = $do\->droplet(56789);
.Ve
.SS "regions"
.IX Subsection "regions"
This will return an array reference of DigitalOcean::Region objects.
.PP
.Vb 1
\&    my $regions = $do\->regions;
\&    
\&    for my $region (@{$regions}) { 
\&        print $region\->name . "\en";
\&    }
.Ve
.SS "images"
.IX Subsection "images"
This will return an array reference of DigitalOcean::Image objects.
.PP
.Vb 1
\&    my $images = $do\->images;
\&    
\&    for my $image (@{$images}) { 
\&        print $image\->name . "\en";
\&    }
.Ve
.SS "image"
.IX Subsection "image"
This will retrieve an image by id and return a DigitalOcean::Image object.
.PP
.Vb 1
\&    my $image = $do\->image(56789);
.Ve
.SS "sizes"
.IX Subsection "sizes"
This will return an array reference of DigitalOcean::Size objects.
.PP
.Vb 1
\&    my $sizes = $do\->sizes;
\&    
\&    for my $size (@{$sizes}) { 
\&        print $size\->name . "\en";
\&    }
.Ve
.SS "ssh_keys"
.IX Subsection "ssh_keys"
This will return an array reference of DigitalOcean::SSH::Key objects.
.PP
.Vb 1
\&    my $ssh_keys = $do\->ssh_keys;
\&    
\&    for my $ssh_key (@{$ssh_keys}) { 
\&        print $ssh_key\->name . "\en";
\&    }
.Ve
.SS "create_ssh_key"
.IX Subsection "create_ssh_key"
This will create a new ssh key and return a DigitalOcean::SSH::Key object. The parameters are:
.IP "\(bu" 4
\&\fBname\fR Required, String, the name you want to give this \s-1SSH\s0 key.
.IP "\(bu" 4
\&\fBssh_key_pub\fR Required, String, the actual public \s-1SSH\s0 key.
.PP
.Vb 4
\&    my $new_ssh_key = $do\->create_ssh_key(
\&        name => \*(Aqnew_ssh_key\*(Aq,
\&        ssh_key_pub => $ssh_key_pub,
\&    );
.Ve
.SS "ssh_key"
.IX Subsection "ssh_key"
This will retrieve an ssh_key by id and return a DigitalOcean::SSH::Key object.
.PP
.Vb 1
\&    my $ssh_key = $do\->ssh_key(56789);
.Ve
.SS "domains"
.IX Subsection "domains"
This will return an array reference of DigitalOcean::Domain objects.
.PP
.Vb 1
\&    my $domains = $do\->domains;
\&    
\&    for my $domain (@{$domains}) { 
\&        print $domain\->name . "\en";
\&    }
.Ve
.SS "create_domain"
.IX Subsection "create_domain"
This will create a new domain and return a DigitalOcean::Domain object. The parameters are:
.IP "\(bu" 4
\&\fBname\fR Required, String, the domain name
.IP "\(bu" 4
\&\fBip_address\fR Required, String, \s-1IP\s0 address for the domain's initial A record.
.PP
.Vb 4
\&    my $domain = $do\->create_domain(
\&        name => \*(Aqexample.com\*(Aq,
\&        ip_address => \*(Aq127.0.0.1\*(Aq,
\&    );
.Ve
.SS "domain"
.IX Subsection "domain"
This will retrieve a domain by id and return a DigitalOcean::Domain object.
.PP
.Vb 1
\&    my $domain = $do\->domain(56789);
.Ve
.SS "event"
.IX Subsection "event"
This will retrieve an event by id and return a DigitalOcean::Event object.
.PP
.Vb 1
\&    my $event = $do\->event(56789);
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Hopkins, \f(CW\*(C`<srchulo at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-webservice\-digitalocean at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=DigitalOcean>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc DigitalOcean
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker (report bugs here)
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=DigitalOcean>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/DigitalOcean>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/DigitalOcean>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/DigitalOcean/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013 Adam Hopkins.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the the Artistic License (2.0). You may obtain a
copy of the full license at:
.PP
<http://www.perlfoundation.org/artistic_license_2_0>
.PP
Any use, modification, and distribution of the Standard or Modified
Versions is governed by this Artistic License. By using, modifying or
distributing the Package, you accept this license. Do not use, modify,
or distribute the Package, if you do not accept this license.
.PP
If your Modified Version has been derived from a Modified Version made
by someone other than you, you are nevertheless required to ensure that
your Modified Version complies with the requirements of this license.
.PP
This license does not grant you the right to use any trademark, service
mark, tradename, or logo of the Copyright Holder.
.PP
This license includes the non-exclusive, worldwide, free-of-charge
patent license to make, have made, use, offer to sell, sell, import and
otherwise transfer the Package with respect to any patent claims
licensable by the Copyright Holder that are necessarily infringed by the
Package. If you institute patent litigation (including a cross-claim or
counterclaim) against any party alleging that the Package constitutes
direct or contributory patent infringement, then this Artistic License
to you shall terminate on the date that such litigation is filed.
.PP
Disclaimer of Warranty: \s-1THE\s0 \s-1PACKAGE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \s-1BY\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0
\&\s-1AND\s0 \s-1CONTRIBUTORS\s0 "\s-1AS\s0 \s-1IS\s0' \s-1AND\s0 \s-1WITHOUT\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0.
\&\s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0, \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0
\&\s-1PURPOSE\s0, \s-1OR\s0 NON-INFRINGEMENT \s-1ARE\s0 \s-1DISCLAIMED\s0 \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0
\&\s-1YOUR\s0 \s-1LOCAL\s0 \s-1LAW\s0. \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1LAW\s0, \s-1NO\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0 \s-1OR\s0
\&\s-1CONTRIBUTOR\s0 \s-1WILL\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1INCIDENTAL\s0, \s-1OR\s0
\&\s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THE\s0 \s-1PACKAGE\s0,
\&\s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0 \s-1DAMAGE\s0.
